<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>这是标题 on Wu Qiqi&#39;s Blog</title>
    <link>http://GEOwuGRAwuPHY.github.io/</link>
    <description>Recent content in 这是标题 on Wu Qiqi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Apr 2019 15:47:02 +0800</lastBuildDate>
    
	<atom:link href="http://GEOwuGRAwuPHY.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于部分测试题的解答</title>
      <link>http://GEOwuGRAwuPHY.github.io/post/second/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://GEOwuGRAwuPHY.github.io/post/second/</guid>
      <description>测试题一 题目内容 题目地址
 根据论文The spread of true and false news online上面的图A1得到数据结构，编写python代码绘制图A2-5  题目理解  研究缘起：科技快速发展，但是没有研究表明科技究竟如何助长了谣言的传播；以往对于谣言的传播多限于对单一谣言的研究，而对于谣言的传播机制究竟与真相的传播有何不同没有过多的涉及。 研究数据来源：2006至2017年发布在推特上的rumor cascades，大约有126000条传言被近三百万人传播。研究中的数据由六个独立的事实核查机构的信息来判定消息的真假，它们的判定结果有着95-98%的一致性。 研究发现：谣言传播的广度（涉及传播人数）远远高于真相传播的人群；谣言传播的速度也快于真相的传播 主要概念定义：
 rumor cascades：同一个消息来源被不断的转发扩散而形成的传言扩散模式
eg:就同一个消息，一个人进行转发，其他人在此基础上转发评论，由此形成一个rumor cascades，另一个人独立于此进行转发评论，那么就形成了两个rumor cascades。转发数量决定rumor cascades的规模；用户基于同一事件单独发帖的次数决定了级联的层数
eg:如果10个人分别发了有关传言A的帖子，但是没有人转发，那么传言A就有10个层级，每个层级的规模为1。同样，如果2个人分别发了关于传言B的帖子，每个帖子都分别有100个人转发，那么传言B就有2个层级，每个层级的规模为100。
 depth:原帖被一个新的用户转发的次数（被之前已经转发过的用户第二次、第三次…等转发的次数不算在内）
 max-breadth:任一cascades所涉及的最多的用户数（用户数最多的那个级联的用户数量）
 size:所有cascades总共涉及的用户数
 structural virality:这是一种插入内容之中的测度，这些内容通过单一的庞大消息源或者多层级模式传播——在这种模式中每个个体的直接参与都是整个传播的一部分(即任意两次分享之间的平均距离）
  (具体计算方法可参考文献：《在线社交媒体信息传播效果的结构性扩散度》）   由于题目内容中所附带的链接中不包含图例的数据集内容，且不包含关于A2-A5图的代码，因此针对图例人为生成了数据集
针对节点进行了编号，数据集格式采用了时间戳，源节点，目标节点的格式，在不进行传播的时间里，源节点及目标节点编号设置为-1，-1
数据集内容如下所示
1,0,1 2,-1,-1 3,0,2 4,1,3 5,-1,-1 6,2,4 7,2,5 8,-1,-1 9,-1,-1 10,3,6 11,2,7  代码实现 这是我的代码
import os import matplotlib.pyplot as plt #A2 def calc_depth(): with open (r&#39;input.</description>
    </item>
    
  </channel>
</rss>